# Find the best cc in a merged graph
Input data is like:

    graph("net1").
    graph("net2").

    node("A","net1").
    node("B","net1").
    node("C","net1").
    node("D","net1").
    node("E","net1").
    node("G","net1").

    node("A","net2").
    node("B","net2").
    node("C","net2").
    node("E","net2").
    node("F","net2").
    node("G","net2").

    edge("A","B","net1").
    edge("B","C","net1").
    edge("C","D","net1").
    edge("C","E","net1").
    edge("D","G","net1").
    edge("G","E","net1").

    edge("A","B","net2").
    edge("B","C","net2").
    edge("C","E","net2").
    edge("C","F","net2").
    edge("F","G","net2").

    align("A","net1","A","net2").
    align("B","net1","B","net2").
    align("C","net1","C","net2").
    align("E","net1","E","net2").
    align("G","net1","G","net2").

Where:

    graph(G): G identify a graph.
    node(X,G): X identify a node in graph G.
    edge(X,Y,G): X is linked to Y in graph G.
    align(X,G,Y,H): node X in graph G is aligned with node Y in graph H.

Aligned nodes having the same name is not expectable from input data.

## Goal
Find the largest connected component in the aligned graph, i.e. the greater set of linked nodes
in the graph defined as (X,E), where X are aligned nodes (align/4),
and E the edges linking nodes in X that also links the aligned nodes in each of the two input graph.


## Python implementation
The merged graph hold names found in first graph (graph name that is the second parameter of align/4).
Use [Networkx](http://networkx.org) to found the cc.

`graph/1` atoms NEEDS to be the first in the file.
`align/4` atoms NEEDS to provide the graphs in the same order.
